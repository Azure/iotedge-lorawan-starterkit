# File: azure-pipelines-buildpushiotedge-templates.yaml
parameters:
  platform: ''
  deviceID: ''
  deploymentTemplate: 'deployment.test.template.json'
  deploymentConfigFile: 'deployment.test.json'

steps:

# Find out the image tag
# master        -> majorVersion-buildId
# dev           -> majorVersion-preview-buildId
# pr            -> pr-prId-buildId
# custom branch -> custom-branchname-buildId
- bash: |
    if [ "$BUILD_SOURCEBRANCH" = "refs/heads/dev" ]; then
    echo "dev"
    IMAGE_TAG="$DEV_IMAGE_TAG-"
    elif [ "$BUILD_SOURCEBRANCH" = "refs/heads/master" ]; then
    echo "master"
    IMAGE_TAG="$MASTER_IMAGE_TAG"
    elif [ "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" != "" ]; then
    echo "pull request"
    IMAGE_TAG="pr-$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER-"
    else
    echo "all others"
    IMAGE_TAG="custom-$BUILD_SOURCEBRANCHNAME-"
    fi
    echo "Using image tag prefix $IMAGE_TAG"
    IMAGE_TAG="$IMAGE_TAG$BUILD_BUILDID"
    echo "Using image tag $IMAGE_TAG"
    echo "##vso[task.setvariable variable=NET_SRV_VERSION]$IMAGE_TAG"
    echo "##vso[task.setvariable variable=PKT_FWD_VERSION]$IMAGE_TAG"           
  displayName: Set Module version numbers
  name: setImageTag

# Azure IoT Edge - Build images
- task: AzureIoTEdge@2
  displayName: 'Azure IoT Edge - Build module ${{ parameters.platform }} images'
  inputs:
    deploymentid: $(IOT_DEPLOYMENT_ID)
    templateFilePath: ./LoRaEngine/${{parameters.deploymentTemplate}}
    defaultPlatform: ${{ parameters.platform }}

# Azure IoT Edge - Push images
- task: AzureIoTEdge@2
  displayName: 'Azure IoT Edge - Push ${{ parameters.platform }} images'
  env:
    AZURE_SUBSCRIPTIONID: $(AZURE_SUBSCRIPTIONID_SECRET)
    CONTAINER_REGISTRY_PASSWORD: $(CONTAINER_REGISTRY_PASSWORD_SECRET)
  inputs:
    action: 'Push module images'
    deploymentid: $(IOT_DEPLOYMENT_ID)
    azureSubscriptionEndpoint: $(AzureServiceConnectionName)
    azureContainerRegistry: '{"loginServer":"$(CONTAINER_REGISTRY_ADDRESS)", "id" : "/subscriptions/$(AZURE_SUBSCRIPTIONID)/resourceGroups/$(ACR_RG)/providers/Microsoft.ContainerRegistry/registries/$(ACR_NAME)"}'
    templateFilePath: ./LoRaEngine/${{parameters.deploymentTemplate}}
    defaultPlatform: ${{ parameters.platform }}

# Azure IoT Edge - Deploy to test device
- task: AzureIoTEdge@2
  displayName: 'Azure IoT Edge - Deploy to integration test device ${{ parameters.deviceID }}'
  inputs:
    action: 'Deploy to IoT Edge devices'
    # In Build: Path of output deployment file.
    deploymentFilePath: $(Build.ArtifactStagingDirectory)/${{parameters.deploymentConfigFile}}
    azureSubscription: $(AzureServiceConnectionName)
    iothubname: $(INTEGRATIONTEST_IOTHUB_NAME)
    deploymentid: $(IOT_DEPLOYMENT_ID)
    deviceOption: 'Single Device'
    deviceId: ${{ parameters.deviceID }}

# Before ending: wait until deployment has completed in device
- task: AzureCLI@1
  displayName: 'Waiting deployment $(IOT_DEPLOYMENT_ID) to be ready at ${{ parameters.deviceID }}...'
  inputs:
    azureSubscription: $(AzureServiceConnectionName)
    timeoutInMinutes: 30
    scriptLocation: inlineScript
    inlineScript: |
      az extension add --name azure-cli-iot-ext     
      until `az iot edge deployment show-metric --deployment-id $(IOT_DEPLOYMENT_ID) --metric-id reportedSuccessfulCount  --hub-name $(INTEGRATIONTEST_IOTHUB_NAME)|grep -q ${{ parameters.deviceID }}`; do sleep 10 && echo wait; done
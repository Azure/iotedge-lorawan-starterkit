name: Universal Decoder CI
on: 
  push:
    paths:
      - 'Samples/UniversalDecoder/**'
  workflow_dispatch:

jobs:
  Build_And_Test:
    name: Build and Test Solution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Samples/UniversalDecoder
    env:
      DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
      DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use node JS
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install
      - name: Get vendor file
        run: npm run codecs
      - name: Run Tests
        run: npm test

  Build_And_Push:
    name: Build and Push Solution
    needs: Build_And_Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - arm32v7
          - amd64
    defaults:
      run:
        working-directory: ./Samples/UniversalDecoder
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
           install: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Use node JS
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install
      - name: Get vendor file
        run: npm run codecs
      - name: Get the image version
        id: vars
        run: echo ::set-output name=tag::0.0.$(echo ${GITHUB_SHA})
      - name: Build and push the tagged Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker buildx build -f "Dockerfile.${{ matrix.image }}" -t ${{ secrets.DOCKER_REPOSITORY }}/universaldecoder:${{steps.vars.outputs.tag}}-${{ matrix.image }} --output type=image,push=true "." 

        
  Docker_Manifests:
    name: Create manifests
    runs-on: ubuntu-latest
    needs: Build_And_Push
    steps:
      - run: echo "output ${{needs.Test_And_Push.outputs.tag}}"
      - name: Login to docker registry
        run: docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Create manifest list
        run: docker manifest create ${{ secrets.DOCKER_REPOSITORY }}/universaldecoder:${{needs.Build_And_Push.outputs.tag}} ${{ secrets.DOCKER_REPOSITORY }}/universaldecoder:${{needs.Build_And_Push.outputs.tag}}-arm32v7  ${{ secrets.DOCKER_REPOSITORY }}/universaldecoder:${{needs.Build_And_Push.outputs.tag}}-amd64 --amend
      - name: Push manifest
        run: docker manifest push ${{ secrets.DOCKER_REPOSITORY }}/universaldecoder:${{needs.Build_And_Push.outputs.tag}}
      

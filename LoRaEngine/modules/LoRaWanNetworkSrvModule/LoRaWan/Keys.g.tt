<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file will be lost if the code is re-generated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace LoRaWan
{
    using System;
<#  foreach (var t in new[]
        {
            "AppKey",
            "AppSessionKey",
            "NetworkSessionKey",
        })
    { #>

    readonly partial struct <#= t #> : IEquatable<<#= t #>>
    {
        public const int Size = UInt128.Size;

        readonly UInt128 value;

        <#= t #>(UInt128 value) => this.value = value;

        public bool Equals(<#= t #> other) => this.value == other.value;
        public override bool Equals(object obj) => obj is <#= t #> other && this.Equals(other);
        public override int GetHashCode() => this.value.GetHashCode();

        public override string ToString() => this.value.ToString();

        public static bool operator ==(<#= t #> left, <#= t #> right) => left.Equals(right);
        public static bool operator !=(<#= t #> left, <#= t #> right) => !left.Equals(right);

        public static <#= t #> Parse(ReadOnlySpan<char> input) =>
            TryParse(input, out var result) ? result : throw new FormatException();

        public static bool TryParse(ReadOnlySpan<char> input, out <#= t #> result)
        {
            if (UInt128.TryParse(input) is (true, var raw))
            {
                result = new <#= t #>(raw);
                return true;
            }
            else
            {
                result = default;
                return false;
            }
        }

        public static <#= t #> Read(ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(buffer));

        public static <#= t #> Read(ref ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(ref buffer));

        public Span<byte> Write(Span<byte> buffer) => this.value.WriteBigEndian(buffer);
    }
<# } #>
}

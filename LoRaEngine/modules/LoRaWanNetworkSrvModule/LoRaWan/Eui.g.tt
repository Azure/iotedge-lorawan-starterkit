<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file will be lost if the code is re-generated.
//------------------------------------------------------------------------------

#nullable enable

namespace LoRaWan
{
    using System;
    using System.Buffers.Binary;
<#  foreach (var t in new[]
        {
            "DevEui",
            "JoinEui",
            "StationEui",
        })
    { #>

    readonly partial struct <#= t #> : IEquatable<<#= t #>>, IFormattable
    {
        public const int Size = sizeof(ulong);

        readonly ulong value;

        public <#= t #>(ulong value) => this.value = value;

        public ulong AsUInt64 => this.value;

        public bool Equals(<#= t #> other) => this.value == other.value;
        public override bool Equals(object? obj) => obj is <#= t #> other && this.Equals(other);
        public override int GetHashCode() => this.value.GetHashCode();

        public override string ToString() => ToString("G", null);

        public static bool operator ==(<#= t #> left, <#= t #> right) => left.Equals(right);
        public static bool operator !=(<#= t #> left, <#= t #> right) => !left.Equals(right);

        public static <#= t #> Read(ReadOnlySpan<byte> buffer) =>
            new(BinaryPrimitives.ReadUInt64LittleEndian(buffer));

        public static <#= t #> Read(ref ReadOnlySpan<byte> buffer)
        {
            var result = Read(buffer);
            buffer = buffer[Size..];
            return result;
        }

        public Span<byte> Write(Span<byte> buffer)
        {
            BinaryPrimitives.WriteUInt64LittleEndian(buffer, this.value);
            return buffer[Size..];
        }

        public static <#= t #> Parse(ReadOnlySpan<char> input) =>
            TryParse(input, out var result) ? result : throw new FormatException();

        public static bool TryParse(ReadOnlySpan<char> input, out <#= t #> result)
        {
            if (Hexadecimal.TryParse(input, out var raw, '-'))
            {
                result = new <#= t #>(raw);
                return true;
            }
            else
            {
                result = default;
                return false;
            }
        }

        public string ToString(string? format, IFormatProvider? formatProvider)
        {
            return format?.ToLowerInvariant() switch
            {
                null or "g" or "d"  => ToHex(this.value, '-'),
                "e"                 => ToHex(this.value, ':'),
                "n"                 => ToHex(value, null),
                "i"                 => Id6.Format(value, Id6.FormatOptions.FixedWidth),
                _ => throw new FormatException(@"Format string can only be null, ""G"", ""g"", ""D"", ""d"", ""I"", ""i"", ""N"", ""n"", ""E"" or ""e"".")
            };

            static string ToHex(ulong value, char? separator)
            {
                Span<byte> bytes = stackalloc byte[sizeof(ulong)];
                var nChars = separator is null ? bytes.Length * 2 : bytes.Length * 3 - 1;
                Span<char> chars = stackalloc char[nChars];
                BinaryPrimitives.WriteUInt64BigEndian(bytes, value);
                Hexadecimal.Write(bytes, chars, separator);
                return new string(chars);
            }
        }
    }
<#  } #>
}

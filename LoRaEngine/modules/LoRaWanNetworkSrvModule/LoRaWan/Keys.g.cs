// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file will be lost if the code is re-generated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace LoRaWan
{
    using System;

    readonly partial struct AppKey : IEquatable<AppKey>
    {
        public const int Size = UInt128.Size;

        readonly UInt128 value;

        AppKey(UInt128 value) => this.value = value;

        public bool Equals(AppKey other) => this.value == other.value;
        public override bool Equals(object obj) => obj is AppKey other && this.Equals(other);
        public override int GetHashCode() => this.value.GetHashCode();

        public override string ToString() => this.value.ToString();

        public static bool operator ==(AppKey left, AppKey right) => left.Equals(right);
        public static bool operator !=(AppKey left, AppKey right) => !left.Equals(right);

        public static AppKey Parse(ReadOnlySpan<char> input) =>
            TryParse(input, out var result) ? result : throw new FormatException();

        public static bool TryParse(ReadOnlySpan<char> input, out AppKey result)
        {
            if (UInt128.TryParse(input) is (true, var raw))
            {
                result = new AppKey(raw);
                return true;
            }
            else
            {
                result = default;
                return false;
            }
        }

        public static AppKey Read(ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(buffer));

        public static AppKey Read(ref ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(ref buffer));

        public Span<byte> Write(Span<byte> buffer) => this.value.WriteBigEndian(buffer);
    }

    readonly partial struct AppSessionKey : IEquatable<AppSessionKey>
    {
        public const int Size = UInt128.Size;

        readonly UInt128 value;

        AppSessionKey(UInt128 value) => this.value = value;

        public bool Equals(AppSessionKey other) => this.value == other.value;
        public override bool Equals(object obj) => obj is AppSessionKey other && this.Equals(other);
        public override int GetHashCode() => this.value.GetHashCode();

        public override string ToString() => this.value.ToString();

        public static bool operator ==(AppSessionKey left, AppSessionKey right) => left.Equals(right);
        public static bool operator !=(AppSessionKey left, AppSessionKey right) => !left.Equals(right);

        public static AppSessionKey Parse(ReadOnlySpan<char> input) =>
            TryParse(input, out var result) ? result : throw new FormatException();

        public static bool TryParse(ReadOnlySpan<char> input, out AppSessionKey result)
        {
            if (UInt128.TryParse(input) is (true, var raw))
            {
                result = new AppSessionKey(raw);
                return true;
            }
            else
            {
                result = default;
                return false;
            }
        }

        public static AppSessionKey Read(ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(buffer));

        public static AppSessionKey Read(ref ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(ref buffer));

        public Span<byte> Write(Span<byte> buffer) => this.value.WriteBigEndian(buffer);
    }

    readonly partial struct NetworkSessionKey : IEquatable<NetworkSessionKey>
    {
        public const int Size = UInt128.Size;

        readonly UInt128 value;

        NetworkSessionKey(UInt128 value) => this.value = value;

        public bool Equals(NetworkSessionKey other) => this.value == other.value;
        public override bool Equals(object obj) => obj is NetworkSessionKey other && this.Equals(other);
        public override int GetHashCode() => this.value.GetHashCode();

        public override string ToString() => this.value.ToString();

        public static bool operator ==(NetworkSessionKey left, NetworkSessionKey right) => left.Equals(right);
        public static bool operator !=(NetworkSessionKey left, NetworkSessionKey right) => !left.Equals(right);

        public static NetworkSessionKey Parse(ReadOnlySpan<char> input) =>
            TryParse(input, out var result) ? result : throw new FormatException();

        public static bool TryParse(ReadOnlySpan<char> input, out NetworkSessionKey result)
        {
            if (UInt128.TryParse(input) is (true, var raw))
            {
                result = new NetworkSessionKey(raw);
                return true;
            }
            else
            {
                result = default;
                return false;
            }
        }

        public static NetworkSessionKey Read(ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(buffer));

        public static NetworkSessionKey Read(ref ReadOnlySpan<byte> buffer) =>
            new(UInt128.ReadBigEndian(ref buffer));

        public Span<byte> Write(Span<byte> buffer) => this.value.WriteBigEndian(buffer);
    }
}

name: $(Build.SourceBranchName)_$(Build.Reason)_$(majorVersion).$(Build.BuildId)$(Rev:.r)
variables:

  # Major version
  majorVersion: 1.0.0

  # image tag prefix for master branch (0.2.0)
  MASTER_IMAGE_TAG: ''

  # image tag prefix for dev branch (0.3.0-dev)
  DEV_IMAGE_TAG: dev

  buildConfiguration: 'Release'

  edgeAgentVersion: 1.0.6
  edgeHubVersion: 1.0.6
  edgeHubRoute: FROM /* INTO $upstream

  # Defines the name of the VSTS agent in ARM architecture
  vstsAgentARM: myAgent-arm32v7

  # Defines the name of the VSTS agent in AMD64 architecture
  vstsAgentAMD: myAgent-amd64

  # Network Server module level: 1 in order to get decoder information
  networkServerLogLevel: 1

  # IoT Edge Runtime configuration
  EDGE_AGENT_VERSION: $(edgeAgentVersion)
  EDGE_HUB_VERSION: $(edgeHubVersion)
  EDGEHUB_OPTIMIZEFORPERFORMANCE: false
  EDGEHUB_MQTTSETTINGS_ENABLED: false
  EDGEHUB_HTTPSETTINGS_ENABLED: false
  EDGEHUB_ROUTE: $(edgeHubRoute)
  # LoRaWan Modules
  NET_SRV_LOG_LEVEL: $(networkServerLogLevel)  
  NET_SRV_LOGTO_UDP: true
  NET_SRV_LOGTO_HUB: false
  NET_SRV_IOTEDGE_TIMEOUT: 0
  NET_SRV_VERSION: "" # Network Server module version
  NET_SRV_LOG_TO_UDP_ADDRESS: AzureDevOpsAgent # Hostname of container where AzureDevOpsAgent will be running for Udp logging sink
  PKT_FWD_VERSION: "" # Packet Forward module version

# Enable PR validation on branches master and dev
pr:
  branches:
    include:
    - master
    - dev

# Enable CI on branches master and dev
# Batch builds
trigger:
  batch: true
  branches:
    include:
    - dev
    - master

jobs:

# [Job] Smoke test job: ensure code compiles and unit tests are working
- job: build_and_test
  condition: ne(variables['RunTestsOnly'], 'true') # do not run if RunTestsOnly == true
  displayName: Build and Test Solution
  continueOnError: false
  pool:
    # name: docker
    # demands: Agent.OSArchitecture -equals X64
    vmImage: 'Ubuntu 16.04'   

  steps:
  # build LoRa Engine
  - script: dotnet build --configuration $(buildConfiguration) ./LoRaEngine/LoRaEngine.sln
    displayName: Build LoRa Engine

  # build C# Samples/DecoderSample
  - script: dotnet build --configuration $(buildConfiguration) ./Samples/DecoderSample
    displayName: Build C# Samples/DecoderSample    

  # build LoRa Simulator
  - script: dotnet build --configuration $(buildConfiguration) ./LoRaEngine/modules/LoRaSimulator/LoRaSimulator.sln
    displayName: Build LoRa Simulator    
    

  # Run unit tests
  - script: |
      mkdir $(Build.SourcesDirectory)\results
      dotnet test --logger trx ./LoRaEngine/test/LoRaWanNetworkServer.Test/*.csproj &&  dotnet test --logger trx ./LoRaEngine/modules/LoRaWanNetworkSrvModule/LoRaToolsTest/*.csproj && dotnet test --logger trx ./LoRaEngine/test/LoraKeysManagerFacade.Test/*.csproj
    displayName: Run unit tests    
  
  # Quick test runner test
  - bash: ./test_runner.sh "$COMMON_TESTRESULTSDIRECTORY"
    displayName: Execute LoRaWanNetworkServer.Test tests (with retry)
    workingDirectory: ./LoRaEngine/test/LoRaWanNetworkServer.Test
    failOnStderr: true
    timeoutInMinutes: 45
    enabled: false

  # Publish Test Results to Azure Pipelines/TFS
  - task: PublishTestResults@2
    condition: always()    
    inputs:
      testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit
      testResultsFiles: '**/*.trx'
      testRunTitle: Unit tests 

  # Find out if full ci is enabled for Pull Request validation
  - bash: |
     echo "Looking for label at https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels"
     if curl -s "https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels" | grep '"name": "fullci"'
     then       
       echo "##vso[task.setvariable variable=prWithCILabel;isOutput=true]true"
       echo "fullci label found!"
     fi
    displayName: Check for CI label build on PR
    condition: eq(variables['Build.Reason'], 'PullRequest')
    name: checkPrCILabel

# [Job] Build, push and deploy arm32v7 IoT Edge Solution - primary gateway
- job: full_ci_deploy_arm_primary
  displayName: Build, push and deploy arm32v7 IoT Edge Solution - Primary Gateway
  variables:
    IOT_DEPLOYMENT_ID: integrationtestarmprimary
    VSTS_AGENT: "$(vstsAgentARM)"
    RESET_PIN: $(RESET_PIN_PRIMARY)
    # Defines image version to use in case in ARM architecture
    DEVOPS_AGENT_IMAGE: "$(CONTAINER_REGISTRY_ADDRESS)/azuredevopsagent:$(DEVOPS_AGENT_IMAGE_VERSION)-arm32v7"
    
  dependsOn: build_and_test
  condition: and(ne(variables['IoTEdgeDeviceARMPrimary'], ''), and(ne(variables['RunTestsOnly'], 'true'), and(succeeded(), or(eq(dependencies.build_and_test.outputs['checkPrCILabel.prWithCILabel'], true), or(eq(variables['FullCI'],'true'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/dev'))))))
  pool:
    # name: docker
    # demands: Agent.OSArchitecture -equals X64
    vmImage: 'Ubuntu 16.04'   
  steps:
    - template: azure-pipelines-buildpushiotedge-templates.yaml
      parameters:
        platform: arm32v7
        deviceID: $(IoTEdgeDeviceARMPrimary)

# [Job] Build, push and deploy arm32v7 IoT Edge Solution - secondary gateway
- job: full_ci_deploy_arm_secondary
  displayName: Build, push and deploy arm32v7 IoT Edge Solution - Secondary Gateway
  variables:
    IOT_DEPLOYMENT_ID: integrationtestarmsecondary
    VSTS_AGENT: "$(vstsAgentARM)"
    RESET_PIN: $(RESET_PIN_SECONDARY)
    # Defines image version to use in case in ARM architecture
    DEVOPS_AGENT_IMAGE: "$(CONTAINER_REGISTRY_ADDRESS)/azuredevopsagent:$(DEVOPS_AGENT_IMAGE_VERSION)-arm32v7"
    
  dependsOn: build_and_test
  condition: and(ne(variables['IoTEdgeDeviceARMSecondary'], ''), and(ne(variables['RunTestsOnly'], 'true'), and(succeeded(), or(eq(dependencies.build_and_test.outputs['checkPrCILabel.prWithCILabel'], true), or(eq(variables['FullCI'],'true'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/dev'))))))
  pool:
    # name: docker
    # demands: Agent.OSArchitecture -equals X64
    vmImage: 'Ubuntu 16.04'   
  steps:
    - template: azure-pipelines-buildpushiotedge-templates.yaml
      parameters:
        platform: arm32v7
        deviceID: $(IoTEdgeDeviceARMSecondary)
        deploymentTemplate: deployment.test.secondary.template.json
        deploymentConfigFile: deployment.test.secondary.json


# [Job] Build, push and deploy amd64 IoT Edge Solution 
- job: full_ci_deploy_amd
  displayName: Build, push and deploy amd64 IoT Edge Solution
  variables:
    IOT_DEPLOYMENT_ID: integrationtestamd
    VSTS_AGENT: "$(vstsAgentAMD)"
    # Defines image version to use in case in AMD architecture
    DEVOPS_AGENT_IMAGE: "$(CONTAINER_REGISTRY_ADDRESS)/azuredevopsagent:$(DEVOPS_AGENT_IMAGE_VERSION)-amd64"
    
  dependsOn: build_and_test
  condition: and(ne(variables['IoTEdgeDeviceAMD'], ''), and(ne(variables['RunTestsOnly'], 'true'), and(succeeded(), or(eq(dependencies.build_and_test.outputs['checkPrCILabel.prWithCILabel'], true), or(eq(variables['FullCI'],'true'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/dev'))))))
  pool:
    # name: docker
    # demands: Agent.OSArchitecture -equals X64
    vmImage: 'Ubuntu 16.04'   
  steps:
    - template: azure-pipelines-buildpushiotedge-templates.yaml
      parameters:
        platform: amd64
        deviceID: $(IoTEdgeDeviceAMD)

# [Job] Build and deploy Facade Azure Function 
- job: full_ci_deploy_facade_function
  displayName: Build and deploy Facade Azure Function   
  dependsOn: build_and_test
  condition: and(ne(variables['RunTestsOnly'], 'true'), and(succeeded(), or(eq(dependencies.build_and_test.outputs['checkPrCILabel.prWithCILabel'], true), or(eq(variables['FullCI'],'true'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/dev')))))
  pool:
    vmImage: 'Ubuntu 16.04'
  
  steps:
  # Build Facade Azure Function
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish Facade Azure Function'
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'LoRaEngine/LoraKeysManagerFacade/*.csproj'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true

  # Deploy Facade Azure Function
  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy Facade Azure Function'
    inputs:
      azureSubscription: $(AzureServiceConnectionName)
      appType: functionapp
      WebAppName: $(FACADE_WEBAPPNAME)
      packageForLinux: '$(Build.ArtifactStagingDirectory)/LoraKeysManagerFacade.zip'
      enableCustomDeployment: true
      #DeploymentType: zipDeploy
      DeploymentType: runFromZip
      TakeAppOfflineFlag: false



- job: test_runner_amd_eu
  displayName: Run tests in AMD device (EU)
  dependsOn: 
    - full_ci_deploy_amd
    - full_ci_deploy_facade_function
  condition: and(ne(variables['IoTEdgeDeviceAMD'], ''), or(succeeded(), eq(variables['RunTestsOnly'], 'true')))
  timeoutInMinutes: 60
  pool:    
    name: Default
    demands: Agent.OSArchitecture -equals x64 # Run on AMD test device
  variables:      
    INTEGRATIONTEST_LeafDeviceSerialPort: "/dev/ttyACM0"
    INTEGRATIONTEST_IoTHubEventHubConsumerGroup: "reserved_integrationtest_amd" 
    INTEGRATIONTEST_LeafDeviceGatewayID: $(IoTEdgeDeviceAMD)
    INTEGRATIONTEST_DevicePrefix: ''
  steps:
  - template: azure-pipeline-integration-test-steps-template.yaml
    parameters:
      platform: amd64

# [Job] Runs the test in ARM device using VSTS Agent
- job: test_runner_arm_eu
  displayName: Run tests in ARM device (EU)
  dependsOn: 
    - full_ci_deploy_arm_primary
    - full_ci_deploy_arm_secondary
    - full_ci_deploy_facade_function
  condition: and(ne(variables['IoTEdgeDeviceARMPrimary'], ''), or(succeeded(), eq(variables['RunTestsOnly'], 'true')))
  timeoutInMinutes: 120 # Raspberry PI is slow, allow taking 120 minutes
  pool:    
    name: Default
    demands: Agent.OSArchitecture -equals ARM # Run on pi atm
  variables:      
    INTEGRATIONTEST_LeafDeviceSerialPort: "/dev/ttyACM0"
    INTEGRATIONTEST_IoTHubEventHubConsumerGroup: "reserved_integrationtest" 
    INTEGRATIONTEST_LeafDeviceGatewayID: $(IoTEdgeDeviceARMPrimary)
    INTEGRATIONTEST_DevicePrefix: '01'
  
  steps:
  - template: azure-pipeline-integration-test-steps-template.yaml
    parameters:
      platform: arm32v7
